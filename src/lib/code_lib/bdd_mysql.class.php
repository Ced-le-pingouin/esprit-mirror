<?php

// This file is part of Esprit, a web Learning Management System, developped
// by the Unite de Technologie de l'Education, Universite de Mons, Belgium.
// 
// Esprit is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2, 
// as published by the Free Software Foundation.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of 
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
// See the GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program; if not, you can get one from the web page
// http://www.gnu.org/licenses/gpl.html
// 
// Copyright (C) 2001-2006  Unite de Technologie de l'Education, 
//                          Universite de Mons-Hainaut, Belgium. 

/**
 * @file	bdd_mysql.class.php
 * 
 * Contient la classe de gestion de DB, ici MySQL
 * 
 * @date	2001/09/04
 * 
 * @author	CÃ©dric FLOQUET
 */

/**
 * Interface avec une DB MySQL
 */
class CBddMySql
{
	var $sHote;			///< ParamÃ¨tre "hÃ´te" pour la connexion Ã  la DB
	var $sLogin;		///< ParamÃ¨tre "username" pour la connexion Ã  la DB
	var $sMdp;			///< ParamÃ¨tre "mot de passe" pour la connexion Ã  la DB
	var $sNom;			///< Nom de la DB de dÃ©part
	var $hLien = 0;		///< Handle de la connexion Ã©tablie Ã  la DB
	var $sRequete = "";	///< DerniÃ¨re requÃªte 'tentÃ©e' (pas forcÃ©ment rÃ©ussie)
	var $ahResult;		///< Tableau des handles de rÃ©sultats de requÃªtes
	
	/**
	 * Constructeur. Effectue la connexion au serveur DB, et sÃ©lectionne automatiquement la DB spÃ©cifiÃ©e
	 * 
	 * @param	v_sHote		l'adresse du serveur DB
	 * @param	v_sLogin	le username Ã  utiliser pour la connexion
	 * @param	v_sMdp		le mot de passe Ã  utiliser pour la connexion
	 * @param	v_sNom		le nom de la DB Ã  sÃ©lectionner automatiquement
	 */
	function CBddMySql($v_sHote = "localhost", $v_sLogin, $v_sMdp, $v_sNom)
	{
		// les infos de connexion sont copiÃ©es dans les propriÃ©tÃ©s de la classe
		$this->sHote = $v_sHote;
		$this->sLogin = $v_sLogin;
		$this->sMdp = $v_sMdp;

		// tente la connexion, si echec, on arrÃªte directement
		$this->hLien = mysql_connect($this->sHote, $this->sLogin, $this->sMdp) or die;

		// configure le charset du client
		mysql_query("SET NAMES 'utf8'");

		// connexion Ã  la base voulue
		mysql_select_db($v_sNom, $this->hLien) or $this->traiterErreur();

		// connexion Ã  la base rÃ©ussie -> son nom est copiÃ© dans la propriÃ©tÃ© ad hoc
		$this->sNom = $v_sNom;
	}
	
	/**
	 * Pseudo-destructeur (doit Ãªtre appelÃ© explicitement). Ferme la connexion au serveur DB
	 */
	function terminer()
	{
		mysql_close($this->hLien) or $this->traiterErreur();
	}

	
	/**
	 * ExÃ©cute une requÃªte SQL, et en cas de rÃ©ussite enregistre le handle du rÃ©sultat dans le tableau \c ahResult
	 * 
	 * @param	v_sRequete	le texte de la requÃªte, sans point-virgule final. Une seule requÃªte Ã  la fois donc
	 * @param	v_bAfficher	si \c true, le texte de la requÃªte est affichÃ© dans la page (debug)
	 * @param 	v_bRetourneErreur si \c true, on retourne le numéro de l'erreur (utilisé seulement lors de l'inscription (par import) d'étudiant)
	 * 
	 * @return	l'indice du handle de rÃ©sultat dans le tableau \c ahResult en cas de rÃ©ussite de la requÃªte, \c false 
	 * 			en cas d'Ã©chec (erreur de syntaxe ou autre), ou \c iNumeroErreur lors de l'import d'étudiant (inscription)
	 */
	function executerRequete($v_sRequete, $v_bAfficher = FALSE,$v_bRetourneErreur = FALSE)
	{
		// si la requÃªte n'est pas vide, on la copie dans la propriÃ©tÃ© ad hoc
		if ($v_sRequete != "")
			$this->sRequete = $v_sRequete;

		// affiche le texte de la requÃªte avant l'exÃ©cution
		if ($v_bAfficher)
			print $this->sRequete . "<br>";

		// si la requÃªte est valide...
		if ($hResult = mysql_query($this->sRequete, $this->hLien))
		{
			// ...on enregistre le handle du rÃ©sultat Ã  la fin de notre tableau...
			$this->ahResult[] = $hResult;
			// ...on place le pointeur du tableau Ã  la fin...
			end($this->ahResult);
			// ...et on renvoie l'indice (donc le numÃ©ro) de ce rÃ©sultat
			return key($this->ahResult);
		}
		// requÃªte invalide -> erreur, retourne FALSE
		else
		{
			$iNumeroErreur = $this->traiterErreur(TRUE,$v_bRetourneErreur);
			if ($v_bRetourneErreur) return $iNumeroErreur;
		}
			
		return FALSE;
	}
	
	
	/**
	 * Retourne l'id gÃ©nÃ©rÃ© pour le dernier enregistrement insÃ©rÃ© avec champ AUTO_INCREMENT
	 * 
	 * @return	l'id du dernier enregistrement insÃ©rÃ© avec colonne AUTO_INCREMENT
	 */
	function retDernierId() { return mysql_insert_id($this->hLien); }
	
	/**
	 * Retourne le nombre de rÃ©sultats de requÃªtes (tableau \c ahResult)
	 * 
	 * @return	le nombre de rÃ©sultats de requÃªtes exploitables
	 */
	function retNbResults() { return count($this->ahResult); }
	
	/**
	 * Retourne le nombre d'enregistrements rÃ©cupÃ©rÃ©s par une requÃªte
	 * 
	 * @param	v_iNumResult	l'indice du handle de rÃ©sultats Ã  utiliser (plusieurs rÃ©sultats peuvent Ãªtre gardÃ©s, 
	 * 							dans \c ahResult). Par dÃ©faut \c null, ce qui revient Ã  traiter le rÃ©sultat de la 
	 * 							derniÃ¨re requÃªte rÃ©ussie
	 * 
	 * @return	le nombre d'enregistrements rÃ©cupÃ©rÃ©s dans le rÃ©sultat de requÃªte spÃ©cifiÃ©
	 */
	function retNbEnregsDsResult($v_iNumResult = NULL)
	{
		// si le numÃ©ro de rÃ©sultat n'est pas fourni, on prend le dernier
		if (empty($v_iNumResult))
		{
			end($this->ahResult);
			$v_iNumResult = key($this->ahResult);
		}
	
		return mysql_num_rows($this->ahResult[$v_iNumResult]);
	}
	
	/**
	 * Retourne sous forme d'objet PHP l'enregistrement suivant dans un rÃ©sultat de requÃªte
	 * 
	 * @param	v_iNumResult	l'indice du rÃ©sultat de requÃªte Ã  utiliser (voir #retNbEnregsDsResult())
	 * 
	 * @return	l'objet PHP contenant les champs de l'enregistrement suivant du rÃ©sultat de la requÃªte
	 */
	function retEnregSuiv($v_iNumResult = NULL)
	{
		// si le numÃ©ro de rÃ©sultat n'est pas fourni, on prend le dernier
		if (empty($v_iNumResult))
		{
			end($this->ahResult);
			$v_iNumResult = key($this->ahResult);
		}
	
		return mysql_fetch_object($this->ahResult[$v_iNumResult]);
	}
	
	/**
	 * Retourne le premier champ d'un enregistrement donnÃ© dans un rÃ©sultat de requÃªte
	 * 
	 * @param	v_iNumResult	l'indice du rÃ©sultat de requÃªte Ã  utiliser (voir #retNbEnregsDsResult())
	 * @param	v_iNumEnreg		l'indice de l'enregistrement dans le rÃ©sultat (le premier = 0)
	 * 
	 * @return	le premier champ de l'enregistrement spÃ©cifiÃ©, dans le rÃ©sultat de requÃªte voulu
	 * 
	 * @note	Cette fonction est limitÃ©e au premier champ, elle est surtout utilisÃ©e pour les requÃªtes SELECT dont 
	 * 			le rÃ©sultat n'a qu'un enregistrement et un seul champ non nommÃ©, comme <code>SELECT MD5("blah")</code> 
	 * 			ou <code>SELECT COUNT(*) FROM Table</code>
	 */
	function retEnregPrecis($v_iNumResult = NULL, $v_iNumEnreg = 0)
	{
		// si le numÃ©ro de rÃ©sultat n'est pas fourni, on prend le dernier
		if (empty($v_iNumResult))
		{
			end($this->ahResult);
			$v_iNumResult = key($this->ahResult);
		}
	
		return mysql_result($this->ahResult[$v_iNumResult], $v_iNumEnreg);
	}
	
	/**
	 * LibÃ¨re les ressources associÃ©es Ã  un rÃ©sultat de requÃªte. Le rÃ©sultat est Ã©galement enlevÃ© du tableau \c ahResult
	 * 
	 * @param	v_iNumResult	l'indice du rÃ©sultat Ã  libÃ©rer (voir #retNbEnregsDsResult())
	 */
	function libererResult($v_iNumResult = NULL)
	{
		// si le numÃ©ro de rÃ©sultat n'est pas fourni, on prend le dernier
		if (empty($v_iNumResult))
		{
			end($this->ahResult);
			$v_iNumResult = key($this->ahResult);
		}

		// on libÃ¨re les ressources
		mysql_free_result($this->ahResult[$v_iNumResult]);
		// puis on supprime l'entrÃ©e correspondant au rÃ©sultat dans notre tableau
		unset($this->ahResult[$v_iNumResult]);
	}
	
	/**
	 * Fonction utilitaire pour "nettoyer" une donnÃ©e texte. Pour le moment, il s'agit d'un trim suivi de l'enlÃ¨vement 
	 * des backslashes
	 * 
	 * @param	v_sDonnee	le texte Ã  nettoyer
	 * 
	 * @return	le texte nettoyÃ©
	 */
	function validerDonnee($v_sDonnee)
	{
		return stripslashes(trim($v_sDonnee));
	}
	
	/**
	 * ExÃ©cute un "UNLOCK TABLES"
	 */
	function deverrouillerTables()
	{
		$this->executerRequete("UNLOCK TABLES");
	}
	
	/**
	 * Affiche la derniÃ¨re erreur SQL survenue et arrÃªte Ã©ventuellement le script PHP courant
	 * 
	 * @param	v_bEstFatale	si \c true (dÃ©faut), le script PHP est stoppÃ©
	 */
	function traiterErreur($v_bEstFatale = TRUE,$v_bRetourneNumeroErreur=FALSE)
	{
		// si on est connectÃ©, affiche le dernier message d'erreur OU retourne le numéro de l'erreur
		if ($this->hLien)
		{
			if ($v_bRetourneNumeroErreur)
				return mysql_errno($this->hLien);
			else
				print mysql_error($this->hLien);
		}

		// arrÃªt du script PHP si nÃ©cessaire
		if ($v_bEstFatale)
			exit();
	}
}

?>
